use clap::{command, Parser};
use serde::Deserialize;
use std::{path::Path, sync::Arc};
use thiserror::Error;
use tokio::sync::RwLock;

mod nacos;
mod nacos_watch;
pub use nacos::NacosConfigClient;

#[derive(Parser, Debug)]
#[command(version, about, long_about = None)]
struct Args {
    /// 配置文件路径
    #[arg(short, long, default_value = "./config.toml")]
    config_path: String,

    /// 是否启用 Nacos
    #[arg(long)]
    enable_nacos: bool,

    /// Nacos 服务器地址
    #[arg(long, default_value = "http://localhost:8848")]
    nacos_addr: String,

    /// Nacos 命名空间
    #[arg(long, default_value = "public")]
    nacos_namespace: String,

    /// Nacos 数据组
    #[arg(long, default_value = "DEFAULT_GROUP")]
    nacos_group: String,

    /// Nacos 数据ID
    #[arg(long, default_value = "application.toml")]
    nacos_data_id: String,
}

#[derive(Debug, Error)]
pub enum Error {
    #[error("IO error: {0}")]
    Io(#[from] std::io::Error),

    #[error("TOML parse error: {0}")]
    Toml(#[from] toml::de::Error),

    #[error("Nacos error: {0}")]
    Nacos(#[from] nacos_sdk::api::error::Error),
}

pub type Result<T> = std::result::Result<T, Error>;

#[derive(Debug, Deserialize, Clone)]
pub struct Config {
    pub app: AppConfig,
    pub database: DatabaseConfig,
}

#[derive(Debug, Deserialize, Clone)]
pub struct AppConfig {
    pub port: u16,
    pub secret: String,
    pub upload_path: String,
}

#[derive(Debug, Deserialize, Clone)]
pub struct DatabaseConfig {
    pub uri: String,
    pub db_name: String,
}

impl Config {
    pub async fn from_file<P: AsRef<Path>>(path: P) -> Result<Self> {
        let content = tokio::fs::read_to_string(path).await?;
        let config = toml::from_str(&content)?;
        Ok(config)
    }

    pub fn file_url(&self, filename: &str) -> String {
        format!("{}/{}", self.get_upload_path(), filename)
    }

    pub fn get_upload_path(&self) -> String {
        self.app.upload_path.clone()
    }

    pub async fn from_args() -> Result<Self> {
        let args = Args::parse();

        // 如果启用了 Nacos，则从 Nacos 加载配置
        if args.enable_nacos {
            let nacos_client = NacosConfigClient::new(
                &args.nacos_addr,
                &args.nacos_namespace,
                &args.nacos_group,
                &args.nacos_data_id,
            )?;

            let content = nacos_client.get_config().await?;
            let config = toml::from_str(&content)?;
            Ok(config)
        } else {
            // 否则从本地文件加载配置
            Self::from_file(&args.config_path).await
        }
    }
}

#[derive(Clone)]
pub struct SafeConfig {
    pub inner: Arc<RwLock<Config>>,
}

impl SafeConfig {
    pub async fn new() -> Result<Self> {
        let config = Config::from_args().await?;
        Ok(Self {
            inner: Arc::new(RwLock::new(config)),
        })
    }

    pub async fn get_config(&self) -> Result<Config> {
        let config = self.inner.read().await;
        Ok(config.clone())
    }

    pub async fn reload_from_nacos(&self, nacos_client: &NacosConfigClient) -> Result<()> {
        let content = nacos_client.get_config().await?;
        let config = toml::from_str(&content)?;
        let mut writer = self.inner.write().await;
        *writer = config;

        log::info!("Reload config from nacos success");
        Ok(())
    }
}
